/* This file is automatially generated by mkpat. Do not
edit it directly. Instead, edit the connection database. */

#include <stdio.h> /* for NULL */
#include "liberty.h"
#include "patterns.h"
static struct patval conn0[]={
   {1,0,7},
   {0,-1,1},
   {1,-2,2},
   {0,0,2},
   {1,-1,0}};

static struct patval conn1[]={
   {1,0,7},
   {2,-1,7},
   {0,-1,1},
   {1,-2,2},
   {0,0,2},
   {2,-2,0},
   {2,0,0},
   {1,-1,0}};

static struct patval conn2[]={
   {0,0,2},
   {1,-1,2},
   {1,0,0},
   {0,-1,0}};

static struct patval conn3[]={
   {0,1,2},
   {2,1,2},
   {2,0,2},
   {0,0,2},
   {1,1,0},
   {1,0,0}};

static struct patval conn4[]={
   {1,-1,7},
   {1,1,1},
   {0,0,2},
   {2,0,2},
   {2,-1,0},
   {1,0,0},
   {0,-1,0}};

static struct patval conn5[]={
   {1,-1,1},
   {2,0,2},
   {1,1,2},
   {0,0,2},
   {1,0,0},
   {2,1,0},
   {0,1,0}};

static struct patval conn6[]={
   {0,1,2},
   {2,0,2},
   {0,0,2},
   {1,-1,4},
   {1,1,0},
   {1,0,0}};

static struct patval conn7[]={
   {1,-1,1},
   {0,1,2},
   {2,0,2},
   {0,0,2},
   {1,1,0},
   {1,0,0}};

static struct patval conn8[]={
   {0,2,7},
   {-1,1,7},
   {1,1,7},
   {0,-1,1},
   {0,0,2},
   {1,-1,3},
   {-1,-1,3},
   {1,0,0},
   {-1,0,0},
   {0,1,0}};

static struct patval conn9[]={
   {1,0,7},
   {2,1,7},
   {2,0,7},
   {0,-2,1},
   {0,0,2},
   {2,-2,0},
   {2,-1,0},
   {1,-2,0},
   {0,-1,0},
   {1,-1,0}};

static struct patval conn10[]={
   {0,1,7},
   {1,0,7},
   {1,2,1},
   {2,1,2},
   {0,2,2},
   {0,0,2},
   {2,0,0},
   {1,1,0}};

static struct patval conn11[]={
   {1,1,7},
   {2,0,7},
   {0,-1,1},
   {1,-1,2},
   {0,0,2},
   {1,0,0}};

static struct patval conn12[]={
   {2,0,2},
   {0,0,2},
   {1,0,0}};

static struct patval conn13[]={
   {0,0,2},
   {2,-1,2},
   {3,0,2},
   {3,-1,4},
   {2,0,0},
   {1,0,0},
   {1,-1,0},
   {0,-1,0}};

static struct patval conn14[]={
   {0,-1,1},
   {1,-1,2},
   {0,0,2},
   {1,0,0}};

static struct patval conn15[]={
   {0,-1,1},
   {1,-1,2},
   {0,0,2},
   {1,0,0}};

static struct patval conn16[]={
   {2,0,2},
   {0,0,2},
   {1,0,0},
   {1,1,0},
   {1,-1,0},
   {2,1,0},
   {0,1,0}};

static struct patval conn17[]={
   {1,0,7},
   {1,2,7},
   {2,1,7},
   {0,1,1},
   {0,0,2},
   {0,2,2},
   {2,0,0},
   {1,1,0},
   {2,2,0}};

static struct patval conn18[]={
   {1,0,2},
   {0,3,2},
   {0,0,2},
   {0,2,0},
   {1,1,0},
   {0,1,0},
   {1,2,0},
   {1,3,0},
   {2,0,0},
   {2,1,0},
   {2,2,0},
   {2,3,0}};

static struct patval conn19[]={
   {0,2,1},
   {1,0,1},
   {1,2,2},
   {0,0,2},
   {1,1,0},
   {0,1,0}};

static int
autohelper2 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int ai, aj, bi, bj;
  UNUSED(patt);
  UNUSED(color);

  offset(1, 0, ti, tj, &ai, &aj, transformation);
  offset(2, 1, ti, tj, &bi, &bj, transformation);

  return !cut_possible(ai,aj,OTHER_COLOR(color)) && !cut_possible(bi,bj,OTHER_COLOR(color));
}

static int
autohelper6 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int ai, aj, bi, bj, ci, cj;
  UNUSED(patt);
  UNUSED(color);

  offset(2, 2, ti, tj, &ai, &aj, transformation);
  offset(2, 1, ti, tj, &bi, &bj, transformation);
  offset(2, 0, ti, tj, &ci, &cj, transformation);

  return defend_against(ai,aj,color,bi,bj) && countlib(ci,cj,color)>1;
}

static int
autohelper7 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int ai, aj, bi, bj;
  UNUSED(patt);
  UNUSED(color);

  offset(2, 2, ti, tj, &ai, &aj, transformation);
  offset(2, 1, ti, tj, &bi, &bj, transformation);

  return defend_against(ai,aj,color,bi,bj);
}

static int
autohelper10 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int ai, aj, bi, bj;
  UNUSED(patt);
  UNUSED(color);

  offset(-1, 1, ti, tj, &ai, &aj, transformation);
  offset(1, 0, ti, tj, &bi, &bj, transformation);

  return worm[ai][aj].liberties==2 || worm[bi][bj].liberties == 2;
}

static int
autohelper12 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int Ai, Aj;
  UNUSED(patt);
  UNUSED(color);

  offset(2, 1, ti, tj, &Ai, &Aj, transformation);

  return !safe_move(Ai,Aj,OTHER_COLOR(color));
}

static int
autohelper13 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int ai, aj, bi, bj, ci, cj, di, dj;
  UNUSED(patt);
  UNUSED(color);

  offset(2, 0, ti, tj, &ai, &aj, transformation);
  offset(2, 1, ti, tj, &bi, &bj, transformation);
  offset(3, 1, ti, tj, &ci, &cj, transformation);
  offset(1, 0, ti, tj, &di, &dj, transformation);

  return (play_attack_defend_n(OTHER_COLOR(color), 1, 3, ai, aj, bi, bj, ci, cj, ai, aj) || play_attack_defend_n(OTHER_COLOR(color), 1, 3, ai, aj, bi, bj, ci, cj, ci, cj)) &&(play_attack_defend_n(OTHER_COLOR(color), 1, 3, bi, bj, ai, aj, di, dj, bi, bj) || play_attack_defend_n(OTHER_COLOR(color), 1, 3, bi, bj, ai, aj, di, dj, di, dj));
}

static int
autohelper14 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int Ai, Aj, Bi, Bj;
  UNUSED(patt);
  UNUSED(color);

  offset(1, 0, ti, tj, &Ai, &Aj, transformation);
  offset(2, 1, ti, tj, &Bi, &Bj, transformation);

  return (worm[Ai][Aj].attacki != -1) || !safe_move(Bi,Bj,OTHER_COLOR(color));
}

static int
autohelper15 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int Ai, Aj, Bi, Bj;
  UNUSED(patt);
  UNUSED(color);

  offset(-1, -1, ti, tj, &Ai, &Aj, transformation);
  offset(0, 0, ti, tj, &Bi, &Bj, transformation);

  return (worm[Ai][Aj].attacki != -1) && safe_move(Bi,Bj,OTHER_COLOR(color));
}

static int
autohelper16 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int ai, aj, bi, bj, ci, cj, di, dj, ei, ej;
  UNUSED(patt);
  UNUSED(color);

  offset(2, 1, ti, tj, &ai, &aj, transformation);
  offset(2, 2, ti, tj, &bi, &bj, transformation);
  offset(2, 0, ti, tj, &ci, &cj, transformation);
  offset(1, 2, ti, tj, &di, &dj, transformation);
  offset(3, 2, ti, tj, &ei, &ej, transformation);

  return countlib(ci,cj,color)>1 && play_attack_defend_n(OTHER_COLOR(color), 1, 5, ai, aj, bi, bj, ci, cj, di, dj, ei, ej, ei, ej);
}

static int
autohelper19 (struct pattern *patt, int transformation, int ti, int tj, int color)
{
  int ai, aj, bi, bj, Ai, Aj, Bi, Bj;
  UNUSED(patt);
  UNUSED(color);

  offset(2, 2, ti, tj, &ai, &aj, transformation);
  offset(1, 2, ti, tj, &bi, &bj, transformation);
  offset(2, 1, ti, tj, &Ai, &Aj, transformation);
  offset(1, 3, ti, tj, &Bi, &Bj, transformation);

  return  (((play_attack_defend_n(OTHER_COLOR(color), 1, 2, ai, aj, bi, bj, Ai, Aj) && (!play_attack_defend_n(OTHER_COLOR(color), 0, 2, ai, aj, bi, bj, Ai, Aj) || play_attack_defend_n(OTHER_COLOR(color), 1, 2, ai, aj, bi, bj, Bi, Bj))) || (play_attack_defend_n(OTHER_COLOR(color), 1, 2, ai, aj, bi, bj, Bi, Bj) && !play_attack_defend_n(OTHER_COLOR(color), 0, 2, ai, aj, bi, bj, Bi, Bj))) && (((play_attack_defend_n(OTHER_COLOR(color), 1, 2, bi, bj, ai, aj, Ai, Aj) && (!play_attack_defend_n(OTHER_COLOR(color), 0, 2, bi, bj, ai, aj, Ai, Aj) || play_attack_defend_n(OTHER_COLOR(color), 1, 2, bi, bj, ai, aj, Bi, Bj))) || (play_attack_defend_n(OTHER_COLOR(color), 1, 2, bi, bj, ai, aj, Bi, Bj) && !play_attack_defend_n(OTHER_COLOR(color), 0, 2, bi, bj, ai, aj, Bi, Bj)))));
}

struct pattern conn[]={
  {conn0,5,8, "1",0,-2,1,0,0x2,1,-1,
    { 0x00f0d000, 0xf0700000, 0x1f3c0000, 0x00343c0c, 0x0070f0c0, 0xd0f00000, 0x3c340000, 0x003c1f00},
    { 0x00900000, 0x20100000, 0x01180000, 0x00102004, 0x00102040, 0x00900000, 0x20100000, 0x00180100}
   ,0,0,0,NULL,256,0,0,0,0,0,NULL,NULL,0},
  {conn1,8,8, "2",0,-2,2,0,0x2,1,-1,
    { 0x00f0d070, 0xf0700000, 0x1f3c0000, 0x00373d0f, 0x0070f0c0, 0xd0f00000, 0x3d370000, 0x003c1f37},
    { 0x00900000, 0x20100000, 0x01180000, 0x00102004, 0x00102040, 0x00900000, 0x20100000, 0x00180100}
   ,0,0,0,NULL,256,0,0,0,0,0,NULL,NULL,0},
  {conn2,4,2, "3",0,-1,1,0,0x0,-1,-1,
    { 0x00f0f000, 0xf0f00000, 0x3c3c0000, 0x003c3c00, 0x00f0f000, 0xf0f00000, 0x3c3c0000, 0x003c3c00},
    { 0x00104000, 0x40100000, 0x04100000, 0x00100400, 0x00104000, 0x40100000, 0x04100000, 0x00100400}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper2,0},
  {conn3,6,2, "4",0,0,2,1,0x0,-1,-1,
    { 0x003c3c3c, 0x00f0f000, 0xf0f00000, 0x3f3f0000, 0xf0f00000, 0x3c3c0000, 0x003f3f00, 0x00f0f0f0},
    { 0x00140014, 0x00101000, 0x00500000, 0x11110000, 0x10100000, 0x00140000, 0x00111100, 0x00500050}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,NULL,0},
  {conn4,7,4, "5",0,-1,2,1,0x8,1,0,
    { 0x00f07cf0, 0x70f0c000, 0xf43c0000, 0x0c3f3700, 0xc0f07000, 0x7cf00000, 0x373f0c00, 0x003cf43c},
    { 0x00100810, 0x00108000, 0x80100000, 0x08110000, 0x80100000, 0x08100000, 0x00110800, 0x00108010}
   ,0,0,0,NULL,256,0,0,0,0,0,NULL,NULL,0},
  {conn5,7,8, "6",0,-1,2,1,0x0,1,0,
    { 0x003cfc3c, 0xc0f0f000, 0xfcf00000, 0x3f3f0c00, 0xf0f0c000, 0xfc3c0000, 0x0c3f3f00, 0x00f0fcf0},
    { 0x00108410, 0x80104000, 0x48100000, 0x04110800, 0x40108000, 0x84100000, 0x08110400, 0x00104810}
   ,0,0,0,NULL,256,0,0,0,0,0,double_does_break_helper,NULL,0},
  {conn6,6,8, "7",0,-1,2,1,0x0,-1,-1,
    { 0x003cbc30, 0x80f0f000, 0xf8f00000, 0x3c3f0800, 0xf0f08000, 0xbc3c0000, 0x083f3c00, 0x00f0f830},
    { 0x00140010, 0x00101000, 0x00500000, 0x10110000, 0x10100000, 0x00140000, 0x00111000, 0x00500010}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper6,0},
  {conn7,6,8, "8",0,-1,2,1,0x0,-1,-1,
    { 0x003cfc30, 0xc0f0f000, 0xfcf00000, 0x3c3f0c00, 0xf0f0c000, 0xfc3c0000, 0x0c3f3c00, 0x00f0fc30},
    { 0x00148010, 0x80101000, 0x08500000, 0x10110800, 0x10108000, 0x80140000, 0x08111000, 0x00500810}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper7,0},
  {conn8,10,8, "9",-1,-1,1,2,0x2,0,1,
    { 0x74fd7400, 0x74fc7410, 0x74fc7400, 0x74fc7400, 0x74fc7400, 0x74fd7400, 0x74fc7410, 0x74fc7400},
    { 0x00900000, 0x20100000, 0x00180000, 0x00102000, 0x00102000, 0x00900000, 0x20100000, 0x00180000}
   ,0,0,0,NULL,256,0,0,0,0,0,NULL,NULL,0},
  {conn9,10,8, "10",0,-2,2,1,0x2,1,-1,
    { 0x00f0d0d4, 0xf0700000, 0x1f3f0000, 0x01353f3f, 0x0070f0f0, 0xd0f00000, 0x3f350100, 0x003f1f5f},
    { 0x00100000, 0x00100000, 0x00120000, 0x00100020, 0x00100020, 0x00100000, 0x00100000, 0x00120000}
   ,0,0,0,NULL,256,0,0,0,0,0,NULL,NULL,0},
  {conn10,8,8, "11",0,0,2,2,0x0,1,1,
    { 0x00371f3c, 0x0070d0f0, 0xd0700000, 0x1f370000, 0xd0700000, 0x1f370000, 0x00371f3c, 0x0070d0f0},
    { 0x00110204, 0x00100090, 0x00100000, 0x01100000, 0x00100000, 0x02110000, 0x00100118, 0x00100040}
   ,0,0,0,NULL,256,0,0,0,0,0,NULL,autohelper10,0},
  {conn11,6,4, "12",0,-1,2,1,0x0,1,0,
    { 0x00f0f410, 0xf0f04000, 0x7c3c0000, 0x043d3c00, 0x40f0f000, 0xf4f00000, 0x3c3d0400, 0x003c7c10},
    { 0x00904000, 0x60100000, 0x04180000, 0x00102400, 0x00106000, 0x40900000, 0x24100000, 0x00180400}
   ,0,0,0,NULL,256,0,0,0,0,0,basic_cut_helper,NULL,0},
  {conn12,3,2, "13",0,0,2,0,0x0,-1,-1,
    { 0x00303030, 0x00f00000, 0x30300000, 0x003f0000, 0x00f00000, 0x30300000, 0x003f0000, 0x00303030},
    { 0x00100010, 0x00100000, 0x00100000, 0x00110000, 0x00100000, 0x00100000, 0x00110000, 0x00100010}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper12,0},
  {conn13,8,8, "14",0,-1,3,0,0x0,-1,-1,
    { 0x00f0f0f0, 0xf0f00000, 0x3c3c0000, 0x003f3f00, 0x00f0f000, 0xf0f00000, 0x3f3f0000, 0x003c3c3c},
    { 0x00100040, 0x00100000, 0x00100000, 0x00100100, 0x00100000, 0x00100000, 0x01100000, 0x00100004}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper13,0},
  {conn14,4,4, "15",0,-1,1,0,0x0,-1,-1,
    { 0x00f0f000, 0xf0f00000, 0x3c3c0000, 0x003c3c00, 0x00f0f000, 0xf0f00000, 0x3c3c0000, 0x003c3c00},
    { 0x00904000, 0x60100000, 0x04180000, 0x00102400, 0x00106000, 0x40900000, 0x24100000, 0x00180400}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper14,0},
  {conn15,4,4, "16",0,-1,1,0,0x0,1,0,
    { 0x00f0f000, 0xf0f00000, 0x3c3c0000, 0x003c3c00, 0x00f0f000, 0xf0f00000, 0x3c3c0000, 0x003c3c00},
    { 0x00904000, 0x60100000, 0x04180000, 0x00102400, 0x00106000, 0x40900000, 0x24100000, 0x00180400}
   ,0,0,0,NULL,256,0,0,0,0,0,ugly_cutstone_helper,autohelper15,0},
  {conn16,7,2, "17",0,-1,2,1,0x0,-1,-1,
    { 0x003cfc3c, 0xc0f0f000, 0xfcf00000, 0x3f3f0c00, 0xf0f0c000, 0xfc3c0000, 0x0c3f3f00, 0x00f0fcf0},
    { 0x00100010, 0x00100000, 0x00100000, 0x00110000, 0x00100000, 0x00100000, 0x00110000, 0x00100010}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper16,0},
  {conn17,9,8, "18",0,0,2,2,0x2,1,1,
    { 0x003f1d37, 0x0070f070, 0xd0f00000, 0x3d370000, 0xf0700000, 0x1d3f0000, 0x00373d37, 0x00f0d070},
    { 0x00190000, 0x00102010, 0x00900000, 0x20100000, 0x20100000, 0x00190000, 0x00102010, 0x00900000}
   ,0,0,0,NULL,256,0,0,0,0,0,NULL,NULL,0},
  {conn18,12,8, "19",0,0,2,3,0x2,-1,-1,
    { 0x003f3f3f, 0x00f0f0f0, 0xf0f00000, 0x3f3f0000, 0xf0f00000, 0x3f3f0000, 0x003f3f3f, 0x00f0f0f0},
    { 0x00101000, 0x00500000, 0x10100000, 0x00140000, 0x00500000, 0x10100000, 0x00140000, 0x00101000}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,NULL,0},
  {conn19,6,8, "20",0,0,1,2,0x0,-1,-1,
    { 0x003f3f00, 0x00f0f0f0, 0xf0f00000, 0x3c3c0000, 0xf0f00000, 0x3f3f0000, 0x003c3c3c, 0x00f0f000},
    { 0x00122100, 0x00900060, 0x20100000, 0x00180000, 0x00900000, 0x21120000, 0x00180024, 0x00102000}
   ,0,0,0,NULL,64,0,0,0,0,0,NULL,autohelper19,0},
  {NULL, 0,0,NULL,0,0,0,0,0,0,0,{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},0,0,0,NULL,0,0,0,0,0,0,NULL,NULL,0}
};

#define CONNO 20

